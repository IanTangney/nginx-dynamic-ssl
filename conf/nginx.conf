
#user  nobody;
worker_processes  4;

error_log  /var/log/nginx/error.log;
error_log  /var/log/nginx/error.log notice;
error_log  /var/log/nginx/error.log info;
error_log  /var/log/nginx/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {

    upstream database {
            postgres_server  10.0.2.2 dbname=nginx
                             user=USER password=PASS;
    }


    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] $host "$request"'
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    lua_package_path "/tmp/lua-resty-core-0.1.1/lib/?.lua;/tmp/LuaJIT-2.0.4/?.lua;/tmp/ngx_lua/lua/?.lua;lua/?.lua;../lua-resty-core/lib/?.lua;;";
    server {
        listen 443 ssl;
        server_name   _;

        ssl on;

        ssl_certificate /vagrant/certs/nginx.crt;
        ssl_certificate_key /vagrant/certs/nginx.key;
        ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;

        ssl_certificate_by_lua '
            local ssl = require "ngx.ssl"
            ssl.clear_certs()

            -- First, get the common name (the domain)
            local common_name = ssl.server_name()
            if common_name == nil then
                common_name = "unknown"
            end

            -- Connect to the DB
            local pgmoon = require "pgmoon"
            local pg = pgmoon.new({
              host = "10.0.2.2",
              port = "5432",
              database = "nginx",
              user = "USER",
              password = "PASS"
            })
            assert(pg:connect())

            -- Look up the domain in the database and get its data
            local res, err, partial, num_queries = assert(pg:query("SELECT * FROM domains WHERE domain = " .. pg:escape_literal(common_name)))

            if res[1] == nil then
              ngx.log(ngx.ERR, "No certificate found for " .. common_name)
              return
            end

            local certificate = res[1]

            -- Convert the cert to DER, and then set that in SSL
            cert_data, err = ssl.cert_pem_to_der(certificate.certificate)
            if not cert_data then
                ngx.log(ngx.ERR, "failed to convert pem cert to der cert: ", err)
                return
            end
            local ok, err = ssl.set_der_cert(cert_data)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER cert: ", err)
                return
            end

            -- Convert the key to DER by writing the PEM key to disk, and then converting with openssl
            local name = "/tmp/keys/" .. common_name .. ".der"
            local f = io.open(name, "r")
            if f == nil then
              local host_key = "/tmp/keys/" .. common_name .. ".key"
              local generated_key = io.open(host_key, "w+")
              io.output(generated_key)
              io.write(certificate.certificate_key)
              generated_key:close()

              os.execute("openssl rsa -in " .. host_key .. " -outform DER -out " .. name)
            end

            -- Read in the DER key and set that in SSL
            local f = assert(io.open(name, "r"))
            local pkey_data = f:read("*a")
            f:close()
            local ok, err = ssl.set_der_priv_key(pkey_data)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER cert: ", err)
                return
            end
        ';
        server_tokens off;
        location /foo {
            default_type 'text/plain';
            content_by_lua 'ngx.status = 201 ngx.say("foo") ngx.exit(201)';
        }

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
  }
}
